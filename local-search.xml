<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c_middle_ds</title>
    <link href="/2025/07/09/c-middle-ds/"/>
    <url>/2025/07/09/c-middle-ds/</url>
    
    <content type="html"><![CDATA[<p>C实现数据结构<span id="more"></span></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h4 id="顺序表的初始化，插入，删除，查询"><a href="#顺序表的初始化，插入，删除，查询" class="headerlink" title="顺序表的初始化，插入，删除，查询"></a>顺序表的初始化，插入，删除，查询</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//顺序表</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Maxsize 50</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemenType;<br><br><br><span class="hljs-comment">//定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-comment">//起别名时，主名可省略</span><br>    ElemenType data[Maxsize];<br>    <span class="hljs-type">int</span> len;<br>&#125;SqList;<br><br><br><span class="hljs-comment">//顺序表的插入</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> i , ElemenType element)</span>  <span class="hljs-comment">//L需要引用，因为此函数功能为子函数修改主函数数据</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; L.len) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(L.len == Maxsize) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = L.len; j &gt;= i; j--) &#123;       <span class="hljs-comment">// 1  2  3  空闲</span><br>        L.data[j] = L.data[j - <span class="hljs-number">1</span>];          <span class="hljs-comment">// 0  1  2  3        (index)</span><br>    &#125;<br><br>    L.data[i - <span class="hljs-number">1</span>] = element;<br><br>    L.len++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-comment">//顺序表的输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintList1</span><span class="hljs-params">(SqList L)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; L.len;i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,L.data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-comment">//顺序表的删除</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SqList &amp;L,ElemenType element,ElemenType &amp;del)</span><span class="hljs-comment">//del的值会被改变，因此引用</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(element &lt; <span class="hljs-number">1</span> || element &gt; L.len) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    del = L.data[element];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = element;j &lt; L.len;j++) &#123;     <span class="hljs-comment">// 1  2  3  4</span><br>        L.data[j - <span class="hljs-number">1</span>] = L.data[j];           <span class="hljs-comment">// 0  1  2  3       (index)</span><br>    &#125;<br><br>    L.len--;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-comment">//顺序表的输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintList2</span><span class="hljs-params">(SqList L)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; L.len;i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,L.data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">//顺序表的查询</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListSelect</span><span class="hljs-params">(SqList L,ElemenType element)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; L.len;i++) &#123;<br>        <span class="hljs-keyword">if</span>(element == L.data[i]) &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//查询时的输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ListPrint</span><span class="hljs-params">(SqList L,ElemenType element,ElemenType index)</span><br>&#123;<br>    index = ListSelect(L,element);<br>    <span class="hljs-keyword">if</span>(index) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;该数位于顺序表的第%d个&quot;</span>,index);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表中找不到该数&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqList L;<br>    L.data[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    L.data[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>    L.data[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br><br>    L.len = <span class="hljs-number">3</span>;<br><br>    ListInsert(L,<span class="hljs-number">2</span>,<span class="hljs-number">60</span>);<br><br>    PrintList1(L);<br><br>    ElemenType del;<br>    ListDelete(L,<span class="hljs-number">2</span>,del);<br>    PrintList2(L);<br>    <br>    <span class="hljs-type">int</span> ref = ListSelect(L,<span class="hljs-number">3</span>);<br>    ListPrint(L,<span class="hljs-number">3</span>,ref);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h4 id="1-头插法建立链表"><a href="#1-头插法建立链表" class="headerlink" title="1.头插法建立链表"></a>1.头插法建立链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义链表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//头插法建立链表  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_head_insert</span><span class="hljs-params">(LinkList &amp;L)</span><br>&#123;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<span class="hljs-comment">//为头结点分配空间</span><br>    L -&gt; next = <span class="hljs-literal">NULL</span>;<br>    LinkList s;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>) &#123;<br>        s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = x;<br>        s -&gt; next = L -&gt; next;<br>        L -&gt; next = s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//打印链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_list</span><span class="hljs-params">(LinkList L)</span><br>&#123;<br>    L = L-&gt;next;<br>    <span class="hljs-keyword">while</span>(L != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,L-&gt;data);<br>        L = L -&gt; next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    LinkList L;<br>    list_head_insert(L);<br>    print_list(L);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-尾插法建立链表，按位置查找与按值查找"><a href="#2-尾插法建立链表，按位置查找与按值查找" class="headerlink" title="2.尾插法建立链表，按位置查找与按值查找"></a>2.尾插法建立链表，按位置查找与按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode,*LinkList;<br><br><br><span class="hljs-comment">//尾插法建立链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_tail_insert</span><span class="hljs-params">(LinkList &amp;L)</span><br>&#123;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    LinkList s,r = L;<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">9999</span>)<br>    &#123;<br>        s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s -&gt; data = x;<br>        r -&gt; next = s;<br>        r = s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    r -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//尾插法后输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_list</span><span class="hljs-params">(LNode* L)</span>&#123;<br>    L = L -&gt; next;<br>    <span class="hljs-keyword">while</span> (L != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,L-&gt;data);<br>        L = L -&gt; next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-comment">//按位置查找</span><br>LinkList <span class="hljs-title function_">search_index</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (L &amp;&amp; i &lt; index)<br>    &#123;<br>        L = L -&gt; next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-comment">//按位置查找后输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_index</span><span class="hljs-params">(LinkList index)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(index) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按位置查找到的值为%d\n&quot;</span>,index -&gt; data);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//按值查找</span><br>LinkList <span class="hljs-title function_">search_value</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> value)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (L)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(L-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> L;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            L = L -&gt; next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//按值查找输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_value</span><span class="hljs-params">(LinkList index2)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(index2) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按值查找到的值为%d,位置在第%d个\n&quot;</span>,index2 -&gt; data,index2 -&gt; data - <span class="hljs-number">2</span>);<span class="hljs-comment">//由于本例用例为3,4,5,6,7;真正想获取索引需进一步改进代码</span><br>    &#125;<br>&#125;<br><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//尾插法</span><br>    LinkList L,index1,index2;<br>    list_tail_insert(L);<br>    print_list(L);<br><br>    <span class="hljs-comment">//按位置查找</span><br>    index1 = search_index(L,<span class="hljs-number">4</span>);<br>    print_index(index1);<br><br>    <span class="hljs-comment">//按值查找</span><br>    index2 = search_value(L,<span class="hljs-number">6</span>);<br>    print_value(index2);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-按位置插入"><a href="#3-按位置插入" class="headerlink" title="3.按位置插入"></a>3.按位置插入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//按位置插入</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">insert_index</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> value)</span><br>&#123;<br>    LinkList p = search_index(L,index - <span class="hljs-number">1</span>);<span class="hljs-comment">//找到插入位置的前驱结点</span><br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LinkList q = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<span class="hljs-comment">//指向新插入节点的指针</span><br>    q -&gt; data = value;<br>    q -&gt; next = p -&gt; next;<br>    p -&gt; next = q;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-删除节点"><a href="#4-删除节点" class="headerlink" title="4.删除节点"></a>4.删除节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//尾插法建立链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">list_tail_insert</span><span class="hljs-params">(LinkList &amp;L)</span><br>&#123;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    <span class="hljs-type">int</span> x;<br>    LinkList s,r = L;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">9999</span>)<br>    &#123;<br>        s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s -&gt; data = x;<br>        r -&gt; next = s;<br>        r = s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    r -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//按位置查找值</span><br>LinkList <span class="hljs-title function_">search_index</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (L &amp;&amp; i &lt; index)<br>    &#123;<br>        L = L -&gt; next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">//删除节点</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">list_delete</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> index)</span><br>&#123;<br>    LinkList p = search_index(L,index - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LinkList q = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    q = p -&gt; next;<span class="hljs-comment">//要删除的节点</span><br>    <span class="hljs-keyword">if</span>(q == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    p -&gt; next = q -&gt; next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_list</span><span class="hljs-params">(LinkList L)</span><br>&#123;<br>    L = L -&gt; next;<br>    <span class="hljs-keyword">while</span> (L != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,L -&gt; data);<br>        L = L -&gt; next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    LinkList L;<br>    <br>    list_tail_insert(L);<br><br>    list_delete(L,<span class="hljs-number">4</span>);<br><br>    print_list(L);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>初始化栈，判断栈是否为空，入栈，去栈顶元素，弹栈。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> data[MaxSize];<br>    <span class="hljs-type">int</span> top;<br>&#125;SqStack;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span><br>&#123;<br>    S.top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Stack_Empty</span><span class="hljs-params">(SqStack S)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(S.top == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S,<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(S.top == MaxSize - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    S.data[++S.top] = x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">GetTop</span><span class="hljs-params">(SqStack S,<span class="hljs-type">int</span> &amp;m)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(Stack_Empty(S)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    m = S.data[S.top];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S,<span class="hljs-type">int</span> &amp;m)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(Stack_Empty(S)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    m = S.data[S.top--];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqStack S;<br><br>    InitStack(S);<br><br>    <span class="hljs-type">bool</span> flag;<br><br>    flag = Stack_Empty(S);<br><br>    Push(S,<span class="hljs-number">3</span>);<br>    Push(S,<span class="hljs-number">4</span>);<br>    Push(S,<span class="hljs-number">5</span>);<br><br>    <span class="hljs-type">int</span> x;<br>    GetTop(S,x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br><br>    <span class="hljs-type">int</span> y;<br>    Pop(S,y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,y);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>初始化循环队列，判断队空队满，入队，出队</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqQuene</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data[MaxSize];<br>    <span class="hljs-type">int</span> front,rear;<br>&#125;SqQuene;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitQuene</span><span class="hljs-params">(SqQuene &amp;S)</span><br>&#123;<br>    S.front = S.rear = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(SqQuene S)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> S.front == S.rear;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">(SqQuene S)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (S.rear+<span class="hljs-number">1</span>) % MaxSize == S.front;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">EnQuene</span><span class="hljs-params">(SqQuene &amp;S,<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(isFull(S)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    S.data[S.rear] = x;<br>    S.rear = (S.rear+<span class="hljs-number">1</span>) % MaxSize;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DeQuene</span><span class="hljs-params">(SqQuene &amp;S,<span class="hljs-type">int</span> &amp;x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(isEmpty(S)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    x = S.data[S.front];<br>    S.front = (S.front+<span class="hljs-number">1</span>) % MaxSize;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqQuene S;<br>    InitQuene(S);<br><br>    <span class="hljs-type">bool</span> flag;<br>    flag = isEmpty(S);<br>    <span class="hljs-keyword">if</span>(flag) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;quene is empty\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;quene is not empty\n&quot;</span>);<br>    &#125;<br><br>    EnQuene(S,<span class="hljs-number">1</span>);<br>    EnQuene(S,<span class="hljs-number">2</span>);<br>    EnQuene(S,<span class="hljs-number">3</span>);<br><br>    flag = EnQuene(S,<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;insert success\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;inser in failed\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> x;<br>    flag = DeQuene(S,x);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;delete is sucess,value is %d\n&quot;</span>,x);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;delete is failed\n&quot;</span>);<br>    &#125;<br>    flag = DeQuene(S,x);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;delete is sucess,value is %d\n&quot;</span>,x);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;delete is failed\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链表实现的队列"><a href="#链表实现的队列" class="headerlink" title="链表实现的队列"></a>链表实现的队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//队列（链表实现）</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LinkNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    LinkNode *front,*rear;<br>&#125;LinkQuene;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitQuene</span><span class="hljs-params">(LinkQuene &amp;Q)</span><br>&#123;<br>    Q.front = Q.rear = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    Q.front -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(LinkQuene Q)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(Q.front == Q.rear) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">EnQuene</span><span class="hljs-params">(LinkQuene &amp;Q,<span class="hljs-type">int</span> x)</span><br>&#123;<br>    LinkNode *Q1 = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br>    Q1 -&gt; data = x;<br>    Q1 -&gt; next = <span class="hljs-literal">NULL</span>;<br>    Q.rear -&gt; next = Q1;<br>    Q.rear = Q1;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DeQuene</span><span class="hljs-params">(LinkQuene &amp;Q,<span class="hljs-type">int</span> &amp;x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(isEmpty(Q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LinkNode *p = Q.front -&gt; next;<span class="hljs-comment">//拿到第一个结点，队列只能从队头删除</span><br>    x = p -&gt; data;<br>    Q.front -&gt; next = p -&gt; next;<span class="hljs-comment">//断链</span><br>    <span class="hljs-keyword">if</span>(Q.rear == p) &#123;<br>        Q.rear = Q.front;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    LinkQuene Q;<br>    InitQuene(Q);<br><br>    EnQuene(Q,<span class="hljs-number">3</span>);<br>    EnQuene(Q,<span class="hljs-number">4</span>);<br>    EnQuene(Q,<span class="hljs-number">5</span>);<br>    EnQuene(Q,<span class="hljs-number">6</span>);<br><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">bool</span> ret;<br>    ret = DeQuene(Q,x);<br>    <span class="hljs-keyword">if</span>(ret) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dequene success is %d\n&quot;</span>,x);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dequene failed\n&quot;</span>);<br>    &#125;<br><br>    DeQuene(Q,x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------------\n&quot;</span>);<br>    <br>    ret = DeQuene(Q,x);<br>    <span class="hljs-keyword">if</span>(ret) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dequene success is %d\n&quot;</span>,x);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dequene failed\n&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h4 id="层次建树"><a href="#层次建树" class="headerlink" title="层次建树"></a>层次建树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">tree.h<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">lchild</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">rchild</span>;</span><br>&#125;TNode,*Tree;<br><br><span class="hljs-comment">//辅助队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tag</span>&#123;</span><br>    Tree p;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tag</span> *<span class="hljs-title">next</span>;</span><br>&#125;tag,*ptag;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c">tree_build.cpp<br>    <br>    <br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;tree.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    Tree tree = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//树根，初始为空</span><br>    <span class="hljs-type">char</span> c;<span class="hljs-comment">//待插入数据</span><br>    Tree tnew;<span class="hljs-comment">//指向新插入节点</span><br>    ptag phead=<span class="hljs-literal">NULL</span>,ptail=<span class="hljs-literal">NULL</span>,pnew=<span class="hljs-literal">NULL</span>,pcur=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//辅助队列头尾指针，新节点指针，当前指针</span><br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c))&#123;<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        tnew = (Tree)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(TNode));<span class="hljs-comment">//树申请新节点</span><br>        tnew -&gt; c = c;<span class="hljs-comment">//树的数据部分填入数据c</span><br>        pnew = (ptag)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(tag));<span class="hljs-comment">//申请辅助队列新节点</span><br>        pnew -&gt; p = tnew;<span class="hljs-comment">//队列新节点指向树中新节点</span><br><br>        <span class="hljs-keyword">if</span>(tree == <span class="hljs-literal">NULL</span>)&#123;<br>            tree = tnew;<br>            phead = ptail = pnew;<br>            pcur = pnew;<span class="hljs-comment">//将进入树的父节点</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//否则先入队</span><br>            ptail -&gt; next = pnew;<br>            ptail = ptail -&gt; next;<br>            <span class="hljs-keyword">if</span>(pcur -&gt; p -&gt; lchild == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-comment">//当前父节点左孩子为空</span><br>                pcur -&gt; p -&gt; lchild = tnew;<br><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pcur -&gt; p -&gt; rchild == <span class="hljs-literal">NULL</span>)&#123;<br>                pcur -&gt; p -&gt; rchild = tnew;<br>                pcur = pcur -&gt; next;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>建立后的树如下图</p><p><img src="C:\Users\miracle\AppData\Roaming\Typora\typora-user-images\image-20250707120055264.png" alt="image-20250707120055264"></p><h4 id="前中后序遍历"><a href="#前中后序遍历" class="headerlink" title="前中后序遍历"></a>前中后序遍历</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PreOrder</span><span class="hljs-params">(Tree p)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,p -&gt; c);<br>    PreOrder(p -&gt; lchild);<br>    PreOrder(p -&gt; rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(Tree p)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)&#123;<br>    InOrder(p -&gt; lchild);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,p -&gt; c);<br>    InOrder(p -&gt; rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PostOrder</span><span class="hljs-params">(Tree p)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)&#123;<br>    PostOrder(p -&gt; lchild);<br>    PostOrder(p -&gt; rchild);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,p -&gt; c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="层序遍历（广度优先遍历BFS）"><a href="#层序遍历（广度优先遍历BFS）" class="headerlink" title="层序遍历（广度优先遍历BFS）"></a>层序遍历（广度优先遍历BFS）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//树的层序遍历(广度优先遍历)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BFS</span><span class="hljs-params">(Tree T)</span><br>&#123;<br>    LinkQuene Q;<br>    InitQuene(Q);<br>    Tree p;<span class="hljs-comment">//存储出队节点</span><br>    EnQuene(Q,T);<br>    <span class="hljs-keyword">while</span>(!isEmpty(Q)) &#123;<span class="hljs-comment">//队列不为空</span><br>        DeQuene(Q,p);<br>        <span class="hljs-built_in">putchar</span>(p -&gt; c);<br>        <span class="hljs-keyword">if</span>(p -&gt; lchild)&#123;<br>            EnQuene(Q,p -&gt; lchild);<br>        &#125; <br>        <span class="hljs-keyword">if</span>(p -&gt; rchild)&#123;<br>            EnQuene(Q,p -&gt; rchild);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>**重中之重！**生成随机数并使用快速排序进行升序排序，时间复杂度为O(nlgn)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> *a;<span class="hljs-comment">//存储数据的起始地址</span><br>    <span class="hljs-type">int</span> len;<br>&#125;Random;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">random</span><span class="hljs-params">(Random &amp;R,<span class="hljs-type">int</span> len)</span><br>&#123;<br>    R.len = len;<br>    R.a = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*R.len);<br>    srand(time(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; R.len;i++)&#123;<br>        R.a[i] = rand()%<span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Random R)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; R.len;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,R.a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> *A,<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret = A[low];<br>    <span class="hljs-keyword">while</span> (low &lt; high)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; A[high] &gt;= ret)<br>        &#123;<br>            high--;<br>        &#125;<br>        A[low] = A[high];<br>        <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; A[low] &lt;= ret)<br>        &#123;<br>            low++;<br>        &#125;<br>        A[high] = A[low];<br>    &#125;<br>    A[low] = ret;<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> *A,<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(low &lt; high)&#123;<br>    <span class="hljs-type">int</span> ret = partition(A,low,high);<br>    quickSort(A,low,ret - <span class="hljs-number">1</span>);<br>    quickSort(A,ret + <span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    Random R;<br>    random(R,<span class="hljs-number">10</span>);<br>    print(R);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------\n&quot;</span>);<br>    <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>,high = R.len<span class="hljs-number">-1</span>;<br>    quickSort(R.a,low,high);<br>    print(R);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2025/07/06/mybatis/"/>
    <url>/2025/07/06/mybatis/</url>
    
    <content type="html"><![CDATA[<p>mybatis学习小记<span id="more"></span></p><h1 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">UserMapper.java<br><br><span class="hljs-keyword">package</span> com.itheima.springboot_mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.itheima.springboot_mybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><span class="hljs-comment">//自动生成接口的实现类对象bean，并存入IOC容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">//查询所有用户</span><br>    <span class="hljs-meta">@Select(&quot;select id, username, password, name, age from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br>User.java<br><br><span class="hljs-keyword">package</span> com.itheima.springboot_mybatis.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><span class="hljs-comment">//添加了默认的get,set方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-comment">//有参构造</span><br><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-comment">//无参构造</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//ID</span><br>    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> Integer age; <span class="hljs-comment">//年龄</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//本例中lombok失效</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">application.properties</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#数据库配置</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/web01</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志加载配置</span><br><span class="hljs-attr">mybatis.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h2 id="切换数据库连接池"><a href="#切换数据库连接池" class="headerlink" title="切换数据库连接池"></a>切换数据库连接池</h2><p>在application.properties文件中添加以下代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.datasource</span>.type=com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.pool</span>.DruidDataSource<span class="hljs-comment">//此连接池为ailibaba的Druid连接池</span><br></code></pre></td></tr></table></figure><h2 id="添加SQL语句智能辅助提示"><a href="#添加SQL语句智能辅助提示" class="headerlink" title="添加SQL语句智能辅助提示"></a>添加SQL语句智能辅助提示</h2><p>右键SQL语句，依次选择显示上下文操作 -&gt; 语言注入设置 ，选择MySQL即可。</p><h1 id="mybatis实现增删改查"><a href="#mybatis实现增删改查" class="headerlink" title="mybatis实现增删改查"></a>mybatis实现增删改查</h1><h2 id="delete操作"><a href="#delete操作" class="headerlink" title="delete操作"></a>delete操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserMapper.java</span><br><br><span class="hljs-keyword">package</span> com.itheima.springboot_mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.itheima.springboot_mybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Delete;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><span class="hljs-comment">//自动生成接口的实现类对象bean，并存入IOC容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br><span class="hljs-comment">//    //查询所有用户</span><br><span class="hljs-comment">//    @Select(&quot;select id, username, password, name, age from user&quot;)</span><br><span class="hljs-comment">//    public List&lt;User&gt; findAll();</span><br><br>    <span class="hljs-comment">//删除id为5的用户信息数据</span><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br><span class="hljs-comment">//Springboot启动类添加以下代码</span><br><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testdeleteById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.deleteById(<span class="hljs-number">5</span>);<br>        System.out.println(i);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/upload/image.png" alt="img"></p><h2 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a>insert操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">UserMapper.java<br><br><span class="hljs-meta">@Insert(&quot;insert into user(username,password,name,age) values (#&#123;username&#125;,#&#123;password&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br><span class="hljs-comment">//测试类</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;aaabcd&quot;</span>,<span class="hljs-number">20</span>);<br>        userMapper.insert(user);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="select操作"><a href="#select操作" class="headerlink" title="select操作"></a>select操作</h2><h3 id="条件参数为空-条件参数为1时也同下"><a href="#条件参数为空-条件参数为1时也同下" class="headerlink" title="条件参数为空(条件参数为1时也同下)"></a>条件参数为空(条件参数为1时也同下)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelect</span><span class="hljs-params">()</span>&#123;<br>          List&lt;User&gt; list = userMapper.select();<br>          list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="条件参数大于等于2"><a href="#条件参数大于等于2" class="headerlink" title="条件参数大于等于2"></a>条件参数大于等于2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user where username = #&#123;username&#125; and  password = #&#123;password&#125;&quot;)</span><br>          <span class="hljs-keyword">public</span> User <span class="hljs-title function_">selectByUP</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">&quot;username&quot;</span>)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password);<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByUP</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByUP(<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br></code></pre></td></tr></table></figure><p>*<strong>若查询SQL语句中包含两个及以上的参数时，需在方法的形参前加@Param注解用来“记忆”SQL语句中的查询条件参数，否则条件参数会丢失（若是使用官方spring骨架构建的项目，可忽略这一点，原因为spring官方骨架包含了一个父项目，项目中自带了一个Maven编译插件，其中有一条选项为param为true，可自动完成参数“记忆”）。*</strong></p><h1 id="XML映射配置"><a href="#XML映射配置" class="headerlink" title="XML映射配置"></a>XML映射配置</h1><h2 id="定义规则"><a href="#定义规则" class="headerlink" title="定义规则"></a>定义规则</h2><ol><li>XML文件名称与Mapper接口名称一致，并放置在相同包名下（同包同名）。</li><li>XMl文件中的namespace属性与Mapper接口全限定名一致。</li><li>XML文件中的sql语句的id与Mapper接口中的方法名一致。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">USerMapper.xml<br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.springboot_mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.springboot_mybatis.pojo.User&quot;</span>&gt;</span><br>        select id, username, password, name, age from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>userMapper.java<br><br>public List<span class="hljs-tag">&lt;<span class="hljs-name">User</span>&gt;</span> findAll();<br></code></pre></td></tr></table></figure><p>注：简单SQL语句推荐使用注解，复杂SQL推荐使用XML映射配置方式。二者可灵活切换。</p><h2 id="辅助配置"><a href="#辅助配置" class="headerlink" title="辅助配置"></a>辅助配置</h2><p>1、自定义xml文件存放位置</p><p>在application.properties文件中添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#xml文件配置位置</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><p>在rsources目录下新建目录mapper，将xml定义在此目录下即可。</p><p>2、</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java传递类型</title>
    <link href="/2025/07/06/java%E4%BC%A0%E9%80%92%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/07/06/java%E4%BC%A0%E9%80%92%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>Java传递类型详解<span id="more"></span></p><p>在Java中，<strong>按值传递</strong>是指每次传递的都是变量的副本，而非变量值本身，因此修改传递的值并不会影响变量本身的值。基本类型直接拷贝值，对象类型拷贝引用地址。</p><p>java中其实不存在名副其实的<strong>按引用传递</strong>，java中的按引用传递本质上是传递被引用内存地址副本的值，此地址会指向堆内存中的变量值。因此，此副本可以修改原变量的值。传递对象引用类似于传递一张酒店房卡的复印件（你可以用复印件修改房间内的物品，但撕掉复印件不会影响原房卡）。</p><p>在Java中，无论基本类型还是对象类型，<strong>始终传递的是值</strong>（对象类型传递的是引用地址的值），因此严格来说不存在按引用传递。</p><ul><li><strong>按值传递</strong>：<br>“方法接收的是调用者提供的值的<strong>副本</strong>，对参数的修改不会影响原始变量。”</li><li><strong>按引用传递</strong>：<br>“方法直接操作调用者提供的<strong>原始变量</strong>（而非副本），所有修改都会反映到原始变量上。”</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8下载安装+环境变量配置</title>
    <link href="/2025/07/06/Java8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/07/06/Java8%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>Java8下载安装<span id="more"></span></p><p>本文所有代码内容推荐直接复制粘贴，以防输入错误。</p><h1 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h1><p>微信。</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>1.打开jdk-8u341-windows-x64，进入如下页面，点击下一步。<br><img src="/upload/image-dDxH.png" alt="img"></p><p>2.无需修改安装位置，单击下一步。</p><p><img src="/upload/image-eSJc.png" alt="img"></p><p>*<strong>当你看到绿色进度条开始加载时，注意，到这还没安装完，别着急点*</strong></p><p>3.等待进度条加载完成后，会出现如下界面，依旧不修改安装位置，直接单击下一步</p><p><img src="/upload/image-mzut.png" alt="img"></p><p>4.此时的绿色进度条加载完成并显示如下界面时才真正的安装完成。（如下两个图）</p><p><img src="/upload/image-IHRk.png" alt="img"></p><p><img src="/upload/image-fMLw.png" alt="img"></p><h1 id="三、环境变量配置（此步骤不可跳过）"><a href="#三、环境变量配置（此步骤不可跳过）" class="headerlink" title="三、环境变量配置（此步骤不可跳过）"></a>三、环境变量配置（此步骤不可跳过）</h1><p>1.WIN+R打开运行，输入sysdm.cpl，出现如下界面，点击“<strong>高级</strong>”。</p><p><img src="/upload/image-CkuK.png" alt="img"></p><p>2.单击**“环境变量”**</p><p><img src="/upload/image-IkIL.png" alt="img"></p><p>3.在下方的<strong>系统变量</strong>区域点击新建。</p><p><img src="/upload/image-iDFk.png" alt="img"></p><p>4.java8环境变量配置共需<strong>三步</strong>。</p><p>1.新建JAVA_HOME，变量值为你jdk的安装位置，上述步骤未更改可直接复制以下内容，然后单击确定。<img src="/upload/image-viPP.png" alt="img"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JAVA_HOME</span><br><span class="hljs-attribute">C</span>:\Program Files\Java\jdk1.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_341<br></code></pre></td></tr></table></figure><p>2.新建CLASSPATH环境变量，变量值为以下内容，输入进去然后单击确定。</p><p><img src="/upload/image-XcuY.png" alt="img"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">CLASSPATH<br>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar<br></code></pre></td></tr></table></figure><p>3.找到Path，双击进入。</p><p><img src="/upload/image-wbUy.png" alt="img"></p><p>在Path中新建两行内容（重复图片操作两次），复制下方内容即可。</p><p><img src="/upload/image-kNkY.png" alt="img"></p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\bin<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\jre\bin<br></code></pre></td></tr></table></figure><p>***（***</p><p>*<strong>注*</strong>：若你的Path打开以后是一行内容（如下图），并未出现上述图片的表格样式，则在开头添加如下内容即可</p><p><img src="/upload/image-JGwr.png" alt="img"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br></code></pre></td></tr></table></figure><p><strong>）</strong></p><p>此步骤完成后点击确定即可。（连点三个确定即可退出环境变量页面。）</p><p><img src="/upload/image-XoSt.png" alt="img"></p><h1 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h1><p>Win+R打开运行窗口，输入cmd打开命令窗口，输入</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java <span class="hljs-comment">--version</span><br>javac -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>若出现</p><p><img src="/upload/image-oRaH.png" alt="img"></p><p><img src="/upload/image-SRnJ.png" alt="img"></p><p>说明配置成功。</p><p>*<strong>至此jdk8安装结束。*</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>抒情小记</title>
    <link href="/2025/07/06/%E6%8A%92%E6%83%85%E5%B0%8F%E8%AE%B0/"/>
    <url>/2025/07/06/%E6%8A%92%E6%83%85%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>抒情随记</strong><span id="more"></span></p><p>今夜应挚友邀约，一同前去观看了2025年本校毕业生晚会，去时已近夜二十二时。踏入晚会场地，映入眼帘的是潮水般的人群，心里默念“敬爱的学长学姐们就要步入社会，这一晚对他们来说又具有多么深刻的意义”。夜色黑的厉害，每个人都看不清每个人的脸，但纵然，也难掩心中的冲动之情。与挚友穿梭于人群之中，见到了“各色各样”心境的朋友们，会场周围有坐着打牌的，吃小零食聊天的，小情侣相依相偎的······</p><p>与挚友寻得一片观会最佳时间，站定而视。现在正在进行朗诵节目，不过一会，随着清脆的声音落下，大荧幕上涌现“再见”两个赫然醒目的大字，心想“一届人的青春至此告一段落了”，正当我转身想要离去的那一刻，猝不及防的，一段熟悉的旋律被灌入耳道，原来“再见”不只是再见，还是那首熟悉的毕业曲。张震岳的《再见》响起后，一股无名情绪顿时涌上心头，无以言表，浑身上下打起了哆嗦，这也许就是青春的魅力，足以在回忆起时的任何时间任何地点震撼每一个人。脑海中随之而来的不是其他，而是去年巴黎奥运会时，国乒之壁樊振东对阵张本智和的那场比赛。关于那场比赛不想说太多，让我产生共鸣的是在0:2落后张本智和时，王皓指导带樊振东换了一件球衣，寓意：就当作这场比赛已经输掉了，换一件球衣智慧在于，把这次比赛当作从头来过，比分回到0：0，再给自己一次崭新的机会，重新发挥自己的全部。</p><p>想到这些，我不禁联想到自己当前的处境。六月已至，盛夏将近，这对每一个考研人来说，都是最为紧要的关头。我自己并不算特别优秀突出的人，也不敢妄诩为樊振东那样的国之栋梁。在备考的路上，或是复习的压力，抑或是生活的困扰，都曾让我焦头烂额，但我也未曾轻言放弃，一直保持着兵来将挡水来土屯的心态，积极应对一切生活中的不利因素。但我在此刻自觉稍有体会当时在巴黎樊振东的心境，那是怎样的一种破釜沉舟，孤帆勇进的坚韧。我何尝不能为自己“换一件球衣”呢，由于本科层次较差，加上自己前十几年的懵懵懂懂，我其实总是做出自我质疑，但是“世界是一个巨大的草台班子”，这世界的容错性大的难以想象，我只不过是选择了一条符合自己未来规划，未来理想，人生追求的道路，这一切听起来都十分美好，我又有什么理由胆怯呢。我何尝不能把此刻当作已经失去，然后重新来过，剩下的一百多天便是老天赏赐我重新开始的机会，既然已经失去了一次，我本就一无所有，畏惧便更加荒唐。</p><p>**善始者实繁，克终者盖寡。**这句话放在本文中也许适恰。愿我们都不失从头再来的勇气，愿诸位考研人都能在剩下的宝贵的学生生涯中拼劲自己的所有力气，破釜沉舟。</p><p>愿自己在明年的今天，参加毕业晚会时，心中没有遗憾，没有惋惜，没有对未来一百多天自己努力不到位的懊悔。有的只是更加的斗志昂扬，胸有成竹，能够做到以<strong>全新的身份与姿态</strong>，面对崭新的未来！致自己，挚友，与诸位同路人！</p><p>​                                                                                                                                                                               写于 2025.6.10 23.01.59</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>感悟随记</title>
    <link href="/2025/07/06/%E6%84%9F%E6%82%9F%E9%9A%8F%E8%AE%B0/"/>
    <url>/2025/07/06/%E6%84%9F%E6%82%9F%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>感悟随记<span id="more"></span></p><h3 id="1-善始者实繁，克终者盖寡。-—-魏徵-《谏太宗十思疏》"><a href="#1-善始者实繁，克终者盖寡。-—-魏徵-《谏太宗十思疏》" class="headerlink" title="1.善始者实繁，克终者盖寡。  —  魏徵  《谏太宗十思疏》"></a>1.善始者实繁，克终者盖寡。  —  魏徵  《谏太宗十思疏》</h3><p>译：<strong>开头做得好的确实很多，但能够坚持到底的人却很少</strong>。</p><p>这句话强调了在领导和治理中，虽然许多人能够顺利开始，但在取得成功后却容易放松警惕，导致道德衰退和治理失误。因此，<strong>保持警惕和坚持到底是成功的关键</strong>。</p><h3 id="2-弱水三千，只取一瓢饮。-—《红楼梦》第91回"><a href="#2-弱水三千，只取一瓢饮。-—《红楼梦》第91回" class="headerlink" title="2.弱水三千，只取一瓢饮。    —《红楼梦》第91回"></a>2.弱水三千，只取一瓢饮。    —《红楼梦》第91回</h3><p>译：<strong>江河湖泊有很多的水，我只取一瓢来喝就够了。</strong></p><p>此句提醒人们<strong>在一生中可能会遇到很多美好的事物，但只要用心好好把握住其中的一部分就足够了，保持清醒的头脑，追求内心真正需要的东西。</strong></p><h3 id="3-不患寡而患不均，不患贫而患不安。-—-《论语·季氏篇》"><a href="#3-不患寡而患不均，不患贫而患不安。-—-《论语·季氏篇》" class="headerlink" title="3.不患寡而患不均，不患贫而患不安。   — 《论语·季氏篇》"></a>3.不患寡而患不均，不患贫而患不安。   — 《论语·季氏篇》</h3><p>译：<strong>不担忧人少而担忧不平均，不担忧贫穷而担忧不安定。人人均等便没有贫穷，和平安定便不觉得人少，国家平定便没有倾危。</strong></p><p>此句说明了<strong>公平分配的重要性</strong>，治理国家的关键首先在于要能够平均地分配财富，使百姓都能够衣食无忧，使人民的生产和经营活动能够长期、稳定地进行下去，这样才能够促进社会的繁荣与稳定。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>c_base</title>
    <link href="/2025/07/06/c_base/"/>
    <url>/2025/07/06/c_base/</url>
    
    <content type="html"><![CDATA[<p>C基础语法<span id="more"></span></p><h4 id="scanf原理及经典问题"><a href="#scanf原理及经典问题" class="headerlink" title="scanf原理及经典问题"></a>scanf原理及经典问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d\n&quot;</span>,i);<br>    <span class="hljs-comment">//当输入i的值并回车后，程序直接输出了i和c的值，并未在第二个scanf处停留</span><br>    <span class="hljs-comment">//原因是scanf接收的所有数据都需要按下回车才读取，所以缓冲区接收的第一个数据其实是“10\n”</span><br>    <span class="hljs-comment">//而scanf中的%d限制其只能接收整数十进制类型，so“\n”其实留在了缓冲区中，导致第二个scanf误以为\n是等待被接收的值，于是便读取了一个换行符并输出了出来</span><br>    <span class="hljs-comment">//要想解决此类问题，只需在输入完整数后，对缓冲区进行清空，确保第二个scanf读取时缓冲区为空即可。如下:</span><br>    fflush(<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//清空缓冲区，避免转义字符等杂质干扰下面的读取。</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%c\n&quot;</span>,c);<br><br>    <span class="hljs-comment">//若第二个scanf接收的为一个浮点型的数据，则不需要清空缓冲区也可以正确接收到数据</span><br>    <span class="hljs-comment">//因为诸如%d,%f,%s数据类型在接收标准输入时会忽略回车符(\n),空格符等字符，忽略的意思是scanf函数在执行前会首先删除这些字符，然后再等待输入。</span><br>    <span class="hljs-comment">//而%c会接收所有类型的字符，这是最大的不同，也是导致上述问题的核心所在。</span><br>    <span class="hljs-type">float</span> f;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;f);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,f);<br><br>    <span class="hljs-comment">//多种数据类型混合输入</span><br>    <span class="hljs-type">int</span> a,ret;<br>    <span class="hljs-type">char</span> c1;<br>    <span class="hljs-type">float</span> f1;<br>    <span class="hljs-comment">//当使用以下scanf语句接收标准输入时，由于输入%d后缓冲区中残留有一个空格字符,会使得下一个%c将其错误的接受，导致真正的char数据赋给%f并报错,产生一系列错误.</span><br>    <span class="hljs-comment">//解决方法为:不论语句中出现多少个%d、%f,只要在除开头的位置出现了%c,统一在其前加一个空格，即可消除缓冲区中冗余的数据，使scanf可正确接收后面的数据.</span><br>    <span class="hljs-comment">//ret为scanf函数匹配成功的个数</span><br>    ret = <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %c%f&quot;</span>,&amp;a,&amp;c1,&amp;f1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,c=%c,f=%5.2f&quot;</span>,a,c1,f1);<br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3+2</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//字符常量</span><br>    <span class="hljs-type">int</span> x = PI * <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br><br>    <span class="hljs-comment">//实型（浮点型）</span><br>    <span class="hljs-type">float</span> f = <span class="hljs-number">3e-3</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;f = %f\n&quot;</span>,f);<br><br>    <span class="hljs-comment">//字符变量</span><br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,c+<span class="hljs-number">32</span>);<span class="hljs-comment">//大写转小写</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c+<span class="hljs-number">32</span>);<br><br>    <span class="hljs-comment">//字符串常量，c语言中没有定义字符串型变量的关键字，使用字符数组表示，结尾为\0，因此长度比字符多一个字节。</span><br><br>    <span class="hljs-comment">//混合运算</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">float</span> ans = i/<span class="hljs-number">2</span>;<span class="hljs-comment">//此处本质为整数运算，输出为2.0，因为运算左右操作数都为整数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,ans);<br>    <span class="hljs-comment">//需进行强制类型转换</span><br>    <span class="hljs-type">float</span> ans1 = (<span class="hljs-type">float</span>)i/<span class="hljs-number">2</span>;<span class="hljs-comment">//此处才是真正的浮点数运算，输出为2.5</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,ans1);<br><br>    <span class="hljs-comment">//printf函数输出格式控制</span><br>    <span class="hljs-type">int</span> y = <span class="hljs-number">100</span>;<br>    <span class="hljs-type">float</span> avg = <span class="hljs-number">96.25</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,avg);<span class="hljs-comment">//浮点数默认输出六位小数</span><br><br>    <span class="hljs-type">int</span> y1 = <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">float</span> avg1 = <span class="hljs-number">96.255</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,y1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,avg1);<br><br>    <span class="hljs-type">int</span> y2 = <span class="hljs-number">100</span>;<br>    <span class="hljs-type">float</span> avg2 = <span class="hljs-number">96.25</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d &quot;</span>,y2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5.2f\n&quot;</span>,avg2);<br><br>    <span class="hljs-type">int</span> y3 = <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">float</span> avg3 = <span class="hljs-number">96.255</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d &quot;</span>,y3);<span class="hljs-comment">//可控制输出格式为占用5个占位符，即右对齐</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5.2f\n&quot;</span>,avg3);<span class="hljs-comment">//使用%5.2f可控制输出格式，即共输出五个字符，其中保留2位小数</span><br><br>    <span class="hljs-comment">//整数进制转换</span><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%o\n&quot;</span>,n);<span class="hljs-comment">//八进制</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,n);<span class="hljs-comment">//十六进制</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>优先级：算法运算符&gt;关系运算符&gt;逻辑运算符(逻辑与，逻辑或)</p><p>运算时需要考虑到<strong>短路运算</strong></p><p>非运算 <strong>!</strong> 的优先级最高!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by a on 2025/5/6 006.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//逻辑运算符</span><br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;year))&#123;<br>        <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span>  i,j=<span class="hljs-number">6</span>;<br>    i = !!j;<span class="hljs-comment">//非运算符</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,i);<br><br>    <span class="hljs-comment">//短路运算</span><br>    <span class="hljs-comment">//逻辑与&amp;&amp;短路</span><br>    <span class="hljs-comment">//只有左操作数为真时右操作数才运行</span><br>    <span class="hljs-comment">//因为若左操作数为假，则无论右操作数为真为假，与运算结果都为假，结果已经确定</span><br>    <span class="hljs-comment">//因此右操作数没有执行的意义</span><br>    <span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>;<br>    i1 &amp;&amp; <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;只有left为真时我才执行\n&quot;</span>)</span>;<br><br>    <span class="hljs-comment">//逻辑或||短路</span><br>    <span class="hljs-comment">//只有左操作数为假时右操作数才会执行</span><br>    <span class="hljs-comment">//因为若左操作数为真，则无论右操作数为真为假，或运算结果都为真，结果已经确定</span><br>    <span class="hljs-comment">//因此右操作数没有执行的意义</span><br>    <span class="hljs-type">int</span> i2 = <span class="hljs-number">0</span>;<br>    i2 || <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;只有left为假时我才执行\n&quot;</span>);<br><br>    <span class="hljs-comment">//sizeof运算符</span><br>    <span class="hljs-comment">//注意！！！！！！</span><br>    <span class="hljs-comment">//sizeof是运算符，不是函数！！！</span><br>    <span class="hljs-type">int</span>  i3  =  <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i3 size is %d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(i3));<br><br>    <span class="hljs-comment">//注:在赋值运算符中，复合赋值运算符相较于赋值运算符在执行上并无不同，但会节省编译时间，算法中推荐使用。</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><h5 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by a on 2025/5/6 006.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//continue以下的语句全部跳过不执行，直接执行i++</span><br>        total += i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,total);<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> total1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">100</span>)&#123;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            i++;<span class="hljs-comment">//若不加i++直接continue，会导致死循环，因为continue以下的语句都不会执行，i值不会得到更新</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        total1 += i;<br>        i++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,total1);<br>&#125;<br><span class="hljs-comment">//注:在while循环中使用continue要特别慎重</span><br></code></pre></td></tr></table></figure><h5 id="break"><a href="#break" class="headerlink" title="break"></a>break</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//break关键字</span><br>    <span class="hljs-comment">//当total大于2000时结束循环</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> total2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(j &lt;= <span class="hljs-number">100</span>)&#123;<br>        <span class="hljs-keyword">if</span>(total2 &gt; <span class="hljs-number">2000</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        total2 += j;<br>        j++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>,total2,j);<span class="hljs-comment">//输出为2016,64。</span><br></code></pre></td></tr></table></figure><h4 id="双层嵌套for循环"><a href="#双层嵌套for循环" class="headerlink" title="双层嵌套for循环"></a>双层嵌套for循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)&#123;<span class="hljs-comment">//控制总行数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; i+<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//数组定义误区</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[n];<br>以上定义数组的方式错误，由于数组中不支持使用变量作为数组长度，只能使用常量表达式（常亮，符号常量）。c语言不支持对数组大小做动态定义。<br><span class="hljs-comment">//初始化方式</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<span class="hljs-comment">//后五个数默认为0</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;<span class="hljs-comment">//数组全为0</span><br><span class="hljs-comment">//数组的传递</span><br><span class="hljs-comment">//在c语言中，数组作为形参传递到子函数后传递过去的并非数组的长度，而是数组的起始地址（实际数组名中存储的为数组的首地址，弱化的指针），c语言数组采用值传递。</span><br></code></pre></td></tr></table></figure><h4 id="字符数组（字符串）"><a href="#字符数组（字符串）" class="headerlink" title="字符数组（字符串）"></a>字符数组（字符串）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//字符数组定义</span><br><span class="hljs-type">char</span> c[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<span class="hljs-comment">//数组长度为6的原因:在五个字符后会跟有一个结束符&#x27;\0&#x27;，用来标记数组的结束，若长度为5，则结束符无法被存储，导致输出时找不到结束符引发后续字符乱码</span><br><span class="hljs-comment">//使用%s输出字符串，%s其本质为循环输出每一个字符，并在遇到结束符&#x27;\0&#x27;后停止输出。</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/11.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">char</span> c[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;hello&quot;</span>;    <span class="hljs-comment">//定义字符串数组时，长度需要加1，为字符串结尾的&#x27;\0&#x27;提供空间，预防输出乱码</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,c);<br><br>    <span class="hljs-type">char</span> d[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;how&quot;</span>;<br>    print(d);<br>    print(d);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">char</span> d[])</span>    <span class="hljs-comment">//模拟printf(&quot;%s\n&quot;)打印字符串过程</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(d[i])&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,d[i]);<br>        i++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    d[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;H&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组访问越界"><a href="#数组访问越界" class="headerlink" title="数组访问越界"></a>数组访问越界</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/11.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br>    a[<span class="hljs-number">5</span>] = <span class="hljs-number">6</span>;<br>    a[<span class="hljs-number">6</span>] = <span class="hljs-number">7</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>,i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果为“i= 7”，由于内存中i排列在数组后两个位置，正好为a[6]的位置，因此访问越界误修改了i的值。</span><br><span class="hljs-comment">//c语言编译器不会检查数组越界，需自己多加留心。</span><br></code></pre></td></tr></table></figure><h4 id="scanf读取字符串"><a href="#scanf读取字符串" class="headerlink" title="scanf读取字符串"></a>scanf读取字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-type">char</span> c[<span class="hljs-number">10</span>];<br>   <span class="hljs-type">char</span> d[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//scanf读取字符串时，不需要加取地址符，因为数组名c，d中会自动存储数字的起始地址。</span><br>   <span class="hljs-comment">//scanf读取字符串时会自动添加&#x27;\0&#x27;结束符</span><br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,c,d);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n%s&quot;</span>,c,d);<br></code></pre></td></tr></table></figure><h4 id="gets-与puts-函数-字符串操作函数"><a href="#gets-与puts-函数-字符串操作函数" class="headerlink" title="gets()与puts()函数+字符串操作函数"></a>gets()与puts()函数+字符串操作函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">char</span> c[<span class="hljs-number">20</span>];<br>    gets(c);<span class="hljs-comment">//gets中放入字符数组名即可</span><br>    <span class="hljs-built_in">puts</span>(c);<span class="hljs-comment">//只能用于输出字符串，等价于printf(&quot;%s\n&quot;,c);</span><br><br>    <span class="hljs-comment">//字符串操作函数(需调用string头文件)</span><br><br>    <span class="hljs-comment">//1.统计字符串长度</span><br>    <span class="hljs-type">int</span> len;<br>    len = <span class="hljs-built_in">strlen</span>(c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br><br>    <span class="hljs-comment">//字符串拼接</span><br>    <span class="hljs-type">char</span> d[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;world&quot;</span>;<br>    <span class="hljs-built_in">strcat</span>(c,d);<br>    <span class="hljs-built_in">puts</span>(c);<br><br>    <span class="hljs-comment">//字符串比较长度</span><br>    <span class="hljs-comment">//按照ASCII码比较，而非长度，若相等输出0，前者大于后者输出正值，后者大于前者输出负值</span><br>    <span class="hljs-type">int</span> i;<br>    i = <span class="hljs-built_in">strcmp</span>(c,d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<br><br>    <span class="hljs-comment">//字符串复制</span><br>    <span class="hljs-type">char</span> e[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">strcpy</span>(e,d);<br>    <span class="hljs-built_in">puts</span>(e);<br></code></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/13.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> *i = &amp;a;<br><br>    <span class="hljs-type">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-type">char</span> *c = &amp;c1;<br><br>    <span class="hljs-comment">//指针本质为变量的地址，定义时一般*号靠近变量名，例如 int *a,b,c; 意为定义了一个整形指针a，两个整形变量b，c。若*号靠近   int则容易误以为是定义了3个整形指针，实则不然。</span><br>    <span class="hljs-comment">//可通过指针间接访问变量，改变其值</span><br>    *i = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针的传递"><a href="#指针的传递" class="headerlink" title="指针的传递"></a>指针的传递</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> j)</span>&#123;<br>    j = <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change1</span><span class="hljs-params">(<span class="hljs-type">int</span> *j)</span>&#123;<br>    *j = <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//指针的传递</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,j);<br>    change(j);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,j);<br>    change1(&amp;j);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,j);<br>    <span class="hljs-comment">//change()函数输出的仍然是10，change1()输出的为5</span><br>    <span class="hljs-comment">//c语言中的函数调用为值传递，change()函数会开辟一片新的空间，当调用其时，实际上将j的值拷贝了一份到change()的内存空间中         (值传递)，修改后改变的值也是change()内存空间中的副本j，真正变量空间内的j并未被修改，因此返回仍为10。</span><br>    <span class="hljs-comment">//而change1()函数调用时传递的本质为变量j的原始地址，函数接收到地址后通过*j访问到了原始的变量i，并修改，修改成功。</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针的偏移"><a href="#指针的偏移" class="headerlink" title="指针的偏移"></a>指针的偏移</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> *p = a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n---------------------\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<span class="hljs-comment">//p存储的为a数组的起始地址，指针偏移量为指针类型空间大小，如本段代码int指针偏移大小为4字节</span><br>    &#125;<br><span class="hljs-comment">//逆序输出</span><br>    <span class="hljs-type">int</span> *p1 = &amp;a[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p1-i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="指针与一维数组"><a href="#指针与一维数组" class="headerlink" title="指针与一维数组"></a>指针与一维数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">char</span> *p)</span><br>&#123;<br>    *p = <span class="hljs-string">&#x27;H&#x27;</span>;<br>    p[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;E&#x27;</span>;<span class="hljs-comment">//等价于*(p+1) = &#x27;E&#x27;</span><br>    *(p+<span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;L&#x27;</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-built_in">puts</span>(a);<br>    change(a);<span class="hljs-comment">//所有的数组名作为实参传递给函数时都弱化为指针，存储的为数组的起始地址，因此所有类型指针大小都为4个字节(32位系统)，8字节(64位系统)。</span><br>    <span class="hljs-built_in">puts</span>(a);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针与malloc动态内存分配"><a href="#指针与malloc动态内存分配" class="headerlink" title="指针与malloc动态内存分配"></a>指针与malloc动态内存分配</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/15.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//指针与malloc动态内存分配</span><br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;size);<br>    <span class="hljs-type">char</span> *p;<br>    p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<span class="hljs-comment">//动态申请size大小的堆内存空间，但malloc返回的指针类型为void*，即无类型指针(无法作偏移)，因为内存并不知道你用这片空间要存储的是什么类型的数据，因此需要手动转换指针类型。</span><br>    <span class="hljs-built_in">strcpy</span>(p,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(p);<span class="hljs-comment">//此处参数写指针p与数组名本质相同，因为数组名传递到函数中也会弱化为指针，存储的都是数组的起始地址，puts函数的参数类型也是char *类型。</span><br>    <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//申请的堆空间必须手动释放，且参数必须为malloc最初返回的值，不能作偏移，否则报错，初试扣分</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;free success&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈与堆"><a href="#栈与堆" class="headerlink" title="栈与堆"></a>栈与堆</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/15.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-comment">//栈</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">print_stack</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;i am stack&quot;</span>;<br>    <span class="hljs-built_in">puts</span>(c);<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-comment">//堆</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">print_heap</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">strcpy</span>(p,<span class="hljs-string">&quot;i am heap&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(p);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//栈空间与堆空间的差异</span><br><br>    <span class="hljs-comment">//1.栈空间</span><br>    <span class="hljs-comment">//在栈空间中，p1接收到函数返回的字符数组起始地址后，由于print_stack函数执行完毕(第一次输出+返回数组起始地址到p1中)，因此操作系统会释放其所占的栈空间。</span><br>    <span class="hljs-comment">//而由于整个函数都基于栈空间，包括字符数组，因此当栈空间释放后，字符数组也被销毁。</span><br>    <span class="hljs-comment">//因此p1中所存储的数组起始地址已经不再是数组的起始地址，而成为了一片非法地址，因此第二次输出为空(或乱码)。</span><br>    <span class="hljs-type">char</span> *p1;<br>    p1 = print_stack();<br>    <span class="hljs-built_in">puts</span>(p1);<br><br>    <span class="hljs-comment">//2.堆空间(malloc动态空间)</span><br>    <span class="hljs-comment">//堆空间可以完美的解决这一问题，堆空间申请后需要手动free释放。</span><br>    <span class="hljs-comment">//因此虽然heap_print函数运行在栈空间之上，但由于字符数组存储的位置为手动申请的动态堆空间，因此即使函数运行完毕并释放栈空间后，p2中存储的数组起始地址仍为合法地址，可以正确访问数组并输出。</span><br>    <span class="hljs-type">char</span> *p2;<br>    p2 = print_heap();<br>    <span class="hljs-built_in">puts</span>(p2);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">i am <span class="hljs-built_in">stack</span><br>i am heap<br>i am heap<br></code></pre></td></tr></table></figure><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/16.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//结构体</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//结构体定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//结构体初始化</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;mfq&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">89.3</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,s.num,s.name,s.sex,s.age,s.score);<br><br><br>    <span class="hljs-comment">//结构体数组</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">sarr</span>[3];</span><br>    sarr[<span class="hljs-number">0</span>] = s;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,sarr[<span class="hljs-number">0</span>].num,sarr[<span class="hljs-number">0</span>].name,sarr[<span class="hljs-number">0</span>].sex,sarr[<span class="hljs-number">0</span>].age,sarr[<span class="hljs-number">0</span>].score);<br>     <br><br>    <span class="hljs-comment">//scanf读取结构体</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %s %c %d %f&quot;</span>,&amp;s.num,s.name,&amp;s.sex,&amp;s.age,&amp;s.score);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,s.num,s.name,s.sex,s.age,s.score);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结构体指针，结构体数组指针"><a href="#结构体指针，结构体数组指针" class="headerlink" title="结构体指针，结构体数组指针"></a>结构体指针，结构体数组指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">sarr</span>[3] =</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;mfq&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">89.3</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fff&quot;</span>,<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-number">29</span>,<span class="hljs-number">99.6</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;mmm&quot;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">100</span>&#125;;<br><br><span class="hljs-comment">//结构体指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> *<span class="hljs-title">p</span>;</span><br>    p = &amp;s;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p-&gt;num,p-&gt;name,p-&gt;sex,p-&gt;age,p-&gt;score);<br><br>    <span class="hljs-comment">//结构体数组指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> *<span class="hljs-title">p1</span>;</span><br>    p1 = sarr;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p1-&gt;num,p1-&gt;name,p1-&gt;sex,p1-&gt;age,p1-&gt;score);<br><br>    p1 += <span class="hljs-number">1</span>;<span class="hljs-comment">//结构体数组指针偏移</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p1-&gt;num,p1-&gt;name,p1-&gt;sex,p1-&gt;age,p1-&gt;score);<br><br>    p1 += <span class="hljs-number">1</span>;<span class="hljs-comment">//结构体数组指针偏移</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p1-&gt;num,p1-&gt;name,p1-&gt;sex,p1-&gt;age,p1-&gt;score);<br><br><br><br><span class="hljs-comment">//malloc动态分配结构体空间</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> *<span class="hljs-title">p2</span>;</span><br>    p2 = (<span class="hljs-keyword">struct</span> student*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> student));<br>    p2 -&gt; num = <span class="hljs-number">9</span>;<br>    <span class="hljs-comment">//字符串不能直接赋值，需使用strcpy函数赋值</span><br>    <span class="hljs-built_in">strcpy</span>(p2-&gt;name,<span class="hljs-string">&quot;abc&quot;</span>);  <span class="hljs-comment">//p2-&gt;name = &quot;abc&quot;;</span><br>    p2 -&gt; sex = <span class="hljs-string">&#x27;M&#x27;</span>;<br>    p2 -&gt; age = <span class="hljs-number">28</span>;<br>    p2 -&gt; score = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p2-&gt;num,p2-&gt;name,p2-&gt;sex,p2-&gt;age,p2-&gt;score);<br></code></pre></td></tr></table></figure><h4 id="使用typedef优化上述代码"><a href="#使用typedef优化上述代码" class="headerlink" title="使用typedef优化上述代码"></a>使用typedef优化上述代码</h4><p><strong>stu等价于struct student，<em>pstu等价于struct student</em>。</strong></p><p>定义结构体：stu s &#x3D; {}；</p><p>定义结构体指针：pstu p；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by miracle on 2025/6/16.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//结构体</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> score;<br>&#125;stu,*pstu;             <span class="hljs-comment">//stu等价于struct student，*pstu等价于struct student*。</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//结构体初始化</span><br>    stu s = &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;mfq&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">89.3</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,s.num,s.name,s.sex,s.age,s.score);<br><br><br>    <span class="hljs-comment">//结构体数组</span><br>    stu sarr[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;mfq&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">89.3</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fff&quot;</span>,<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-number">29</span>,<span class="hljs-number">99.6</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;mmm&quot;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">100</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,sarr[<span class="hljs-number">0</span>].num,sarr[<span class="hljs-number">0</span>].name,sarr[<span class="hljs-number">0</span>].sex,sarr[<span class="hljs-number">0</span>].age,sarr[<span class="hljs-number">0</span>].score);<br><br><br>    <span class="hljs-comment">//scanf读取结构体</span><br>    <span class="hljs-comment">//scanf(&quot;%d %s %c %d %f&quot;,&amp;s.num,s.name,&amp;s.sex,&amp;s.age,&amp;s.score);</span><br>    <span class="hljs-comment">//printf(&quot;%d %s %c %d %f\n&quot;,s.num,s.name,s.sex,s.age,s.score);</span><br><br><br>    <span class="hljs-comment">//结构体指针</span><br>    pstu p;<br>    p = &amp;s;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p-&gt;num,p-&gt;name,p-&gt;sex,p-&gt;age,p-&gt;score);<br><br><br><br>    <span class="hljs-comment">//结构体数组指针</span><br>    pstu p1;<br>    p1 = sarr;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p1-&gt;num,p1-&gt;name,p1-&gt;sex,p1-&gt;age,p1-&gt;score);<br><br>    p1 += <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p1-&gt;num,p1-&gt;name,p1-&gt;sex,p1-&gt;age,p1-&gt;score);<br><br>    p1 += <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p1-&gt;num,p1-&gt;name,p1-&gt;sex,p1-&gt;age,p1-&gt;score);<br><br><br>    <span class="hljs-comment">//malloc动态分配结构体空间</span><br>    pstu p2;<br>    p2 = (stu*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(stu));<br>    p2 -&gt; num = <span class="hljs-number">9</span>;<br>    <span class="hljs-comment">//字符串不能直接赋值，需使用strcpy函数赋值</span><br>    <span class="hljs-built_in">strcpy</span>(p2-&gt;name,<span class="hljs-string">&quot;abc&quot;</span>);  <span class="hljs-comment">//p2-&gt;name = &quot;abc&quot;;</span><br>    p2 -&gt; sex = <span class="hljs-string">&#x27;M&#x27;</span>;<br>    p2 -&gt; age = <span class="hljs-number">28</span>;<br>    p2 -&gt; score = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %c %d %f\n&quot;</span>,p2-&gt;num,p2-&gt;name,p2-&gt;sex,p2-&gt;age,p2-&gt;score);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="c-引用-：修改一级指针变量"><a href="#c-引用-：修改一级指针变量" class="headerlink" title="c++引用  ：修改一级指针变量"></a>c++引用  ：修改一级指针变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify_num</span><span class="hljs-params">(<span class="hljs-type">int</span> *&amp;p,<span class="hljs-type">int</span> *q)</span><span class="hljs-comment">//引用与变量挨</span><br>&#123;<br>    p = q;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> *q = &amp;a;<br>    modify_num(p,q);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-引用案例"><a href="#C-引用案例" class="headerlink" title="C++引用案例"></a>C++引用案例</h4><p><strong>&amp;：引用用于子函数修改主函数的场景，不涉及改变值的操作无需引用</strong></p><h6 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">float</span> score;<br>&#125;stu;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change1</span><span class="hljs-params">(stu s)</span><br>&#123;<br>    s.num = <span class="hljs-number">2</span>;<br>    s.score = <span class="hljs-number">96</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change2</span><span class="hljs-params">(stu &amp;s)</span><br>&#123;<br>    s.num = <span class="hljs-number">2</span>;<br>    s.score = <span class="hljs-number">96</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    stu s = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">90</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %f\n&quot;</span>,s.num,s.score);<br>    change1(s);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %f\n&quot;</span>,s.num,s.score);<span class="hljs-comment">//输出与原始一致</span><br>    change2(s);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %f\n&quot;</span>,s.num,s.score);<span class="hljs-comment">//引用后输出改变</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//修改结构体指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">float</span> score;<br>&#125; stu;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(stu *p)</span><span class="hljs-comment">//本例中不需要引用，因为引用用于子函数修改主函数中数据的场景，而本例中*p的作用只是传递地址值，并没有对p进行改变，进行改变的为p所指向的数据</span><br>&#123;<br>    p -&gt; num = <span class="hljs-number">5</span>;<br>    p -&gt; score = <span class="hljs-number">999</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    stu *p = (stu*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(stu));<br>    p -&gt; num = <span class="hljs-number">3</span>;<br>    p -&gt; score = <span class="hljs-number">99.0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %f\n&quot;</span>,p-&gt;num,p-&gt;score);<br>    change(p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %f\n&quot;</span>,p-&gt;num,p-&gt;score);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
